# This is a basic workflow to help you get started with Actions

name: create zabbix cluster with terraform

on:
  push:
    branches:
    - terraform
    - development
    paths:
    - terraform/**
  pull_request:
    branches:
    - development
    paths:
    - terraform/**
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action show|plan|apply|destroy'
        default: 'show'

jobs:
  terraform_run:
    environment: zabbix_aws
    defaults:
      run:
        working-directory: terraform
    env:
      TF_STATES_BUCKET: terraform-states
      TERRAGRUNT_BIN_URL: https://github.com/gruntwork-io/terragrunt/releases/download/v0.28.24/terragrunt_linux_amd64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: credentials
        id: credentials
        env:
          SECRETS: ${{ toJSON(secrets) }}
          ACTOR: ${{ github.actor }}
        run: |
          sudo apt-get install jq -y
          SSH_PRIVATE_KEY=$(echo $SECRETS | jq --arg privatekey "${ACTOR^^}_SSH_PRIVATE_KEY" '.[$privatekey]')
          AWS_ACCESS_KEY=$(echo $SECRETS | jq --arg accesskey "${ACTOR^^}_AWS_ACCESS_KEY" '.[$accesskey]')
          AWS_SECRET_KEY=$(echo $SECRETS | jq --arg secretkey "${ACTOR^^}_AWS_SECRET_KEY" '.[$secretkey]')

          echo "::set-output name=SSH_PRIVATE_KEY::$SSH_PRIVATE_KEY"
          echo "::set-output name=AWS_ACCESS_KEY::$AWS_ACCESS_KEY"
          echo "::set-output name=AWS_SECRET_KEY::$AWS_SECRET_KEY"
      - name: dump credentials
        run: |
          echo ${{ toJSON(steps.credentials.outputs) }}
      - name: create public key
        run: |
          cat << EOF > zabbixkey
          ${{ steps.credentials.outputs.SSH_PRIVATE_KEY }}
          EOF
          chmod 400 ./zabbixkey
          ssh-keygen -y -f ./zabbixkey -N "" > zabbixkey.pub
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.credentials.outputs.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ steps.credentials.outputs.AWS_SECRET_KEY }}
      - name: Copy terraform state file from s3 to local
        continue-on-error: true
        run: |
          aws s3 cp s3://${TF_STATES_BUCKET}/terraform.tfstate ./
      - uses: hashicorp/setup-terraform@v1
      - name: Install terragrunt
        run: |
          wget $TERRAGRUNT_BIN_URL -O terragrunt
          chmod +x terragrunt
      - name: Terragrunt Init
        run: ./terragrunt init
      - name: Terragrunt show
        if: |
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.action == 'show'
        run: ./terragrunt show -var key_path=./zabbixkey.pub
      - name: Terragrunt destroy
        if: |
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.action == 'destroy'
        run: ./terragrunt destroy
      - name: Terragrunt plan
        if: |
          github.event_name == 'pull_request' ||
          github.event.inputs.action == 'plan'
        run: ./terragrunt plan -var key_path=./zabbixkey.pub
      - name: Terragrunt apply
        if: |
          github.event_name == 'push' ||
          github.event.inputs.action == 'apply'
        run: ./terragrunt apply -auto-approve -var key_path=./zabbixkey.pub
      - name: Upload terraform tfstate file
        if: |
          github.event_name == 'push' ||
          github.event.inputs.action == 'apply'
        run: |
          aws s3 cp ./terraform.tfstate s3://${TF_STATES_BUCKET}/terraform.tfstate
